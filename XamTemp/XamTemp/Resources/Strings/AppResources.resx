<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AboutBody" xml:space="preserve">
    <value>I created this application while I was in isolation because Covid19-positive. I fully acknowledge the full fullness of uselessness of this project, I did it just to try out some Xamarin features at evenings. If you would like to let me know your opinion, write me at daniele.tentoni.1996@gmail.com or open an issue on Github.</value>
  </data>
  <data name="AboutIntro" xml:space="preserve">
    <value>Welcome to Xam Temperature! Use this application to store your measurements of body temperature and blood oxygen saturation before communicate them to your doctor. Swipe from left to right to mark a report as communicated or from right to left to delete it.</value>
  </data>
  <data name="Bad" xml:space="preserve">
    <value>Bad...</value>
  </data>
  <data name="Cancel" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="Delete" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="DeleteConfirm" xml:space="preserve">
    <value>Are you sure to delete this report? (You will not be able to retreive it)</value>
  </data>
  <data name="Error" xml:space="preserve">
    <value>Errore</value>
  </data>
  <data name="ExceptionMessageReportAdd" xml:space="preserve">
    <value>Exception thrown adding a report: {0}</value>
  </data>
  <data name="ExceptionMessageReportDelete" xml:space="preserve">
    <value>Exception thrown deleting a report: {0}</value>
  </data>
  <data name="ExceptionMessageReportReset" xml:space="preserve">
    <value>Exception thrown resetting data: {e.Message}</value>
  </data>
  <data name="ExceptionMessageReportSend" xml:space="preserve">
    <value>Exception thrown sending a report: {0}</value>
  </data>
  <data name="FeedbackFor" xml:space="preserve">
    <value>Feedback for XamTemp</value>
  </data>
  <data name="InputSaturation" xml:space="preserve">
    <value>Input saturation</value>
  </data>
  <data name="InputTemperature" xml:space="preserve">
    <value>Input temperature</value>
  </data>
  <data name="MadeWith" xml:space="preserve">
    <value>Made with Xamarin.Forms</value>
  </data>
  <data name="NotSure" xml:space="preserve">
    <value>No, don't do it.</value>
  </data>
  <data name="Ok" xml:space="preserve">
    <value>Ok</value>
  </data>
  <data name="ReportToSend" xml:space="preserve">
    <value>You should send this report to your doctor.</value>
  </data>
  <data name="Reset" xml:space="preserve">
    <value>Reset</value>
  </data>
  <data name="ResetConfirmationMessage" xml:space="preserve">
    <value>Are you sure to reset all report data and restore the initial setup of the applicazion?</value>
  </data>
  <data name="ResetNo" xml:space="preserve">
    <value>No, don't reset.</value>
  </data>
  <data name="ResetYes" xml:space="preserve">
    <value>Yes, reset data!</value>
  </data>
  <data name="Saturation" xml:space="preserve">
    <value>Saturation</value>
  </data>
  <data name="SendFeedback" xml:space="preserve">
    <value>Send Feedback</value>
  </data>
  <data name="Sure" xml:space="preserve">
    <value>Yes, I'm sure!</value>
  </data>
  <data name="Temperature" xml:space="preserve">
    <value>Temperature</value>
  </data>
  <data name="UnsupportedEmail" xml:space="preserve">
    <value>Your device doesn't support email sending.</value>
  </data>
  <data name="UnsupportedFeature" xml:space="preserve">
    <value>Unsupported feature</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Version {0}</value>
  </data>
</root>